name: Release Binaries

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: ipchecker
            archive_suffix: x86_64-unknown-linux-gnu.tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            binary_name: ipchecker
            archive_suffix: aarch64-apple-darwin.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: ipchecker
            archive_suffix: x86_64-apple-darwin.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: ipchecker.exe
            archive_suffix: x86_64-pc-windows-msvc.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version and archive name
        shell: bash
        run: |
          # GITHUB_REF_NAME is the tag name, e.g., v0.1.0
          VERSION=${GITHUB_REF_NAME}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          # Construct archive name, e.g., ipchecker-v0.1.0-x86_64-unknown-linux-gnu.tar.gz
          ARCHIVE_NAME="ipchecker-${VERSION}-${{ matrix.archive_suffix }}"
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Prepare package (Unix)
        if: runner.os != 'Windows'
        run: |
          staging_dir="staging"
          mkdir -p "$staging_dir"
          cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "$staging_dir/"
          cp LICENSE README.md "$staging_dir/"
          tar -czf "${{ env.ARCHIVE_NAME }}" -C "$staging_dir" .

      - name: Prepare package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $staging_dir = "staging"
          New-Item -ItemType Directory -Path $staging_dir
          Copy-Item -Path "target\${{ matrix.target }}\release\${{ matrix.binary_name }}" -Destination $staging_dir
          Copy-Item -Path "LICENSE", "README.md" -Destination $staging_dir
          Compress-Archive -Path "$staging_dir\*" -DestinationPath "${{ env.ARCHIVE_NAME }}"

      - name: Generate checksum file
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            pwsh -Command "(Get-FileHash -Algorithm SHA256 -LiteralPath '${{ env.ARCHIVE_NAME }}').Hash.ToLower() + '  ${{ env.ARCHIVE_NAME }}' | Set-Content -Path '${{ env.ARCHIVE_NAME }}.sha256'"
          else
            sha256sum "${{ env.ARCHIVE_NAME }}" > "${{ env.ARCHIVE_NAME }}.sha256"
          fi
          echo "Checksum file content:"
          cat "${{ env.ARCHIVE_NAME }}.sha256"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.ARCHIVE_NAME }}.sha256
          retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: artifact-*

      - name: List files for release
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: artifacts/*/*
